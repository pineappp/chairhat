// See 
	// for the documentation about the tasks.json format
	"version": "2.0.0",
	"tasks": [
		{
			"type": "npm",
			"script": "build",
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		}
	]
}
module.exports = {
  "root": true,
  "env": {
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "tsconfigRootDir": __dirname,
    "ecmaVersion": 2018,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
    "block-spacing": ["warn", "always"],
    "brace-style": ["warn", "1tbs", {"allowSingleLine": true}],
    "curly": ["warn", "all"],
    "default-param-last": "warn",
    "eol-last": ["warn", "always"],
    "eqeqeq": ["error", "always"],
    "indent": [
      "warn",
      "tab",
      {
        "MemberExpression": "off",
        "SwitchCase": 1
      }
    ],
    "linebreak-style": [
      "warn",
      "windows"
    ],
    "max-classes-per-file": ["warn", 1],
    "max-len": ["error", 120],
    "no-console": "error",
    "no-div-regex": "error",
    "no-empty": ["error", { "allowEmptyCatch": true }],
    "no-labels": "error",
    "no-loop-func": "error",
    "no-multi-spaces": ["warn", {"ignoreEOLComments": true}],
    "no-multiple-empty-lines": "warn",
    "no-new": "error",
    "no-self-compare": "warn",
    "no-sequences": "error",
    "no-shadow": "warn",
    "no-unmodified-loop-condition": "error",
    "no-void": "error",
    "no-warning-comments": ["warn", {"terms": ["todo", "fixme", "tslint"]}],
    "prefer-const": "warn",
    "prefer-regex-literals": "warn",
    "require-unicode-regexp": "error",
    "yoda": "warn",

    "@typescript-eslint/array-type": [
      "error",
      { "default": "array-simple" }
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": "Use {} instead.",
          "String": "Use 'string' instead.",
          "Number": "Use 'number' instead.",
          "Boolean": "Use 'boolean' instead."
        }
      }
    ],
    "@typescript-eslint/camelcase": ["warn", {"allow": ["^_[a-z][A-Za-z0-9]*$"]}],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "args": "none" }
    ],
    "@typescript-eslint/unbound-method": "error"
  }
}; 
{
  "name": "wear-a-helmet",
  "version": "0.2.0",
  "private": true,
  "description": "",
  "main": "built/server.js",
  "author": "Microsoft Corporation",
  "license": "MIT",
  "keywords": [
    "mixed reality",
    "virtual reality",
    "vr",
    "altspacevr",
    "sample",
    "node"
  ],
  "engines": {
    "node": "=11.3.0",
    "npm": "=6.11.3"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "clean": "tsc --build --clean",
    "build": "tsc --build",
    "build-only": "tsc --build",
    "build-watch": "tsc --build -w",
    "lint": "eslint --ext .ts src",
    "start": "node .",
    "start-watch": "nodemon --nolazy --inspect .",
    "debug": "node --nolazy --inspect=9229 .",
    "debug-watch": "npm run build-only && concurrently \"npm run build-watch\" \"nodemon --nolazy --inspect=9229 .\""
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^2.17.0",
    "@typescript-eslint/parser": "^2.17.0",
    "eslint": "^6.8.0",
    "nodemon": "^2.0.2"
  },
  "dependencies": {
    "@microsoft/mixed-reality-extension-sdk": "^0.20.0",
    "@types/dotenv": "^6.1.0",
    "@types/node": "^10.3.1",
    "concurrently": "^5.1.0",
    "dotenv": "^6.2.0",
    "node-fetch": "^2.6.1",
    "typescript": "^3.7.5"
  }
}
import * as MRE from '@microsoft/mixed-reality-extension-sdk';

const fetch = require('node-fetch');

/
type HatDescriptor = {
    resourceId: string;
    attachPoint: string;
    scale: {
        x: number;
        y: number;
        z: number;
    };
    rotation: {
        x: number;
        y: number;
        z: number;
    };
    position: {
        x: number;
        y: number;
        z: number;
    };
    previewMargin: number;
};

/**
 * WearAHat Application - Showcasing avatar attachments.
 */
export default class WearAHat {
    // Container for primitives
    private assets: MRE.AssetContainer;

    // Container for instantiated hats.
    private attachedHats = new Map<MRE.Guid, MRE.Actor>();

    // Load the database of hats.
    // tslint:disable-next-line:no-var-requires variable-name
    private HatDatabase: { [key: string]: HatDescriptor } = {};

    // Options
    private previewMargin = 1.5; // spacing between preview objects

    /**
     * Constructs a new instance of this class.
     * @param context The MRE SDK context.
     * @param baseUrl The baseUrl to this project's `./public` folder.
     */
    constructor(private context: MRE.Context, private params: MRE.ParameterSet, private baseUrl: string) {
        this.assets = new MRE.AssetContainer(context);

        // Hook the context events we're interested in.
        this.context.onStarted(() => {

            if(this.params.content_pack){
                // Specify a url to a JSON file
                //https://account.altvr.com/content_packs/1690384237070385856
                // e.g. ws://10.0.1.89:3901?content_pack=1690384237070385856
{
    "KIT_TEST": {
        "resourceId": "artifact: 1690387323448983933"
                fetch('https://account.altvr.com/api/content_packs/' + this.params.content_pack + '/raw.json')
                    .then((res: any) => res.json())
                    .then((json: any) => {
                        this.HatDatabase = Object.assign({}, json, require('../public/defaults.json'));;
                        this.started();
                    })
           }
           switch(this.params.kit) {
                    case "KIT_TEST": {
                        this.HatDatabase = Object.assign({}, require('../public/data/1690384237070385856_KIT_TEST.json'), require('../public/defaults.json'));
                        break;  
                        } }
                this.started();
            }


        });
        this.context.onUserLeft(user => this.userLeft(user));
    }

    /**
     * Called when a Hats application session starts up.
     */
    private async started() {
        // Show the hat menu.
        this.showHatMenu();
    }

    /**
     * Called when a user leaves the application (probably left the Altspace world where this app is running).
     * @param user The user that left the building.
     */
    private userLeft(user: MRE.User) {
        // If the user was wearing a hat, destroy it. Otherwise it would be
        // orphaned in the world.
        if (this.attachedHats.has(user.id)) { this.attachedHats.get(user.id).destroy(); }
        this.attachedHats.delete(user.id);
    }

    /**
     * Show a menu of hat selections.
     */
    private showHatMenu() {
        // Create a parent object for all the menu items.
        const menu = MRE.Actor.Create(this.context);
        let x = 0;

        // check for options first since order isn't guaranteed in a dict
        for (const k of Object.keys(this.HatDatabase)) {
            if (k == "options"){
                const options = this.HatDatabase[k]
                if (options.previewMargin){
                    this.previewMargin = options.previewMargin;
                }
            }
        }

        // Loop over the hat database, creating a menu item for each entry.
        for (const hatId of Object.keys(this.HatDatabase)) {
            if (hatId == "options") continue; // skip the special 'options' key

            const hatRecord = this.HatDatabase[hatId];

            // Create a clickable button.
            var button;

            // special scaling and rotation for commands
            let regex: RegExp = /!$/; // e.g. clear!
            const rotation = (regex.test(hatId) && hatRecord.rotation) ? hatRecord.rotation : { x: 0, y: 0, z: 0 }
            const scale = (regex.test(hatId) && hatRecord.scale) ? hatRecord.scale : { x: 3, y: 3, z: 3 }

            // Create a Artifact without a collider
            MRE.Actor.CreateFromLibrary(this.context, {
                resourceId: hatRecord.resourceId,
                actor: {
                    transform: {
                        local: {
                            position: { x, y: 1, z: 0 },
                            rotation: MRE.Quaternion.FromEulerAngles(
                                rotation.x * MRE.DegreesToRadians,
                                rotation.y * MRE.DegreesToRadians,
                                rotation.z * MRE.DegreesToRadians),
                            scale: scale
                        }
                    }
                }
            });

            // Create an invisible cube with a collider
            button = MRE.Actor.CreatePrimitive(this.assets, {
                definition: {
                    shape: MRE.PrimitiveShape.Box,
                    dimensions: { x: 0.4, y: 0.4, z: 0.4 } // make sure there's a gap
                },
                addCollider: true,
                actor: {
                    parentId: menu.id,
                    name: hatId,
                    transform: {
                        local: {
                            position: { x, y: 1, z: 0 },
                            scale: scale
                        }
                    },
                    appearance: {
                        enabled: false
                    }
                }
            });

            // Set a click handler on the button.
            // NOTE: button press event fails on MAC
            button.setBehavior(MRE.ButtonBehavior).onClick(user => this.wearHat(hatId, user.id));
            //button.setBehavior(MRE.ButtonBehavior).onButton('pressed', user => this.wearHat(hatId, user.id));

            x += this.previewMargin;
        }
    }

    /**
     * Instantiate a hat and attach it to the avatar's head.
     * @param hatId The id of the hat in the hat database.
     * @param userId The id of the user we will attach the hat to.
     */
    private wearHat(hatId: string, userId: MRE.Guid) {
        // If the user selected 'clear', then early out.
        if (hatId == "clear!") {
            // If the user is wearing a hat, destroy it.
            if (this.attachedHats.has(userId)) this.attachedHats.get(userId).destroy();
            this.attachedHats.delete(userId);
            return;
        }
        else if (hatId == "moveup!") {
            if (this.attachedHats.has(userId))
                this.attachedHats.get(userId).transform.local.position.y += 0.01;
            return;
        }
        else if (hatId == "movedown!") {
            if (this.attachedHats.has(userId))
                this.attachedHats.get(userId).transform.local.position.y -= 0.01;
            return;
        }
        else if (hatId == "moveforward!") {
            if (this.attachedHats.has(userId))
                this.attachedHats.get(userId).transform.local.position.z += 0.01;
            return;
        }
        else if (hatId == "moveback!") {
            if (this.attachedHats.has(userId))
                this.attachedHats.get(userId).transform.local.position.z -= 0.01;
            return;
        }
        else if (hatId == "sizeup!") {
            if (this.attachedHats.has(userId)){
                this.attachedHats.get(userId).transform.local.scale.x += 0.02;
                this.attachedHats.get(userId).transform.local.scale.y += 0.02;
                this.attachedHats.get(userId).transform.local.scale.z += 0.02;
            }
            return;
        }
        else if (hatId == "sizedown!") {
            if (this.attachedHats.has(userId)){
                this.attachedHats.get(userId).transform.local.scale.x -= 0.02;
                this.attachedHats.get(userId).transform.local.scale.y -= 0.02;
                this.attachedHats.get(userId).transform.local.scale.z -= 0.02;
            }
            return;
        }

        // If the user is wearing a hat, destroy it.
        if (this.attachedHats.has(userId)) this.attachedHats.get(userId).destroy();
        this.attachedHats.delete(userId);

        const hatRecord = this.HatDatabase[hatId];

        // Create the hat model and attach it to the avatar's head.
        // Jimmy

        const position = hatRecord.position ? hatRecord.position : { x: 0, y: 0, z: 0 }
        const scale = hatRecord.scale ? hatRecord.scale : { x: 1.5, y: 1.5, z: 1.5 }
        const rotation = hatRecord.rotation ? hatRecord.rotation : { x: 0, y: 180, z: 0 }
        const attachPoint = <MRE.AttachPoint> (hatRecord.attachPoint ? hatRecord.attachPoint : 'head')

        this.attachedHats.set(userId, MRE.Actor.CreateFromLibrary(this.context, {
            resourceId: hatRecord.resourceId,
            actor: {
                transform: {
                    local: {
                        position: position,
                        rotation: MRE.Quaternion.FromEulerAngles(
                            rotation.x * MRE.DegreesToRadians,
                            rotation.y * MRE.DegreesToRadians,
                            rotation.z * MRE.DegreesToRadians),
                        scale: scale
                    }
                },
                attachment: {
                    attachPoint: attachPoint,
                    userId
                }
            }
        }));
    }
}
